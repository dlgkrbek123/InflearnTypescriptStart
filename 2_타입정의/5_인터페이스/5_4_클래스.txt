------------------------------------------------------------

- 인터페이스는 클래스에 의해 구현된다.

interface Person {
  name: string;
  age: number;
  isYoungerThan(age: number): boolean;
}

class SomePerson implements Person {
  name: string;
  age: number;

  constructor(name: string, age: number) {
    this.name = name;
    this.age = age;
  }
  isYoungerThan(age: number) {
    return this.age < age;
  }
}

------------------------------------------------------------

- 인터페이스를 확장가능하다.

interface Person {
  name: string;
  age: number;
}
interface Korean extneds Person {
  isLiveInSeoul: booelan;
}


interface Person {
  name: string;
  age: number;
}
interface Programmer {
  favoriteProgrammingLanguage: string;
}

interface Korean extends Person, Programmer {
  isLiveInSeoul: boolean;
}


interface Person {
  name: string;
  age: number;
}
interface Product {
  name: string;
  price: number;
}

type PP = Person & Product;
const pp: PP = {
  name: 'a',
  age: 23,
  price: 1000
}

------------------------------------------------------------

class Person {
  name: string;
  age: number = 0;

  constructor(name: string, age: number) {
    this.name = name;
    this.age = age;
  }
  sayHello() {
    console.log("안녕하세요")
  }
}

------------------------------------------------------------

- 멤버변수와 메서드에 접근범위를 설정할 수 있다.
- 따로 설정하지 않으면 public이 할당된다.

public     - 외부, 상속받는 측에 노출
protected  - 외부에는 미노출, 상속받는 측에는 노출
private    - 외부, 상속받는 측 모두에 미노출

programmer.name // 외부에서 접근
super.sayHello()  // 상속받는 측에서 접근

------------------------------------------------------------

- #을 prefix로 private로 사용
- 최근에 표준으로 채택됨

class Person {
  #name: string;
  // private name: string;

  constructor(name: string) {
    this.#name = name;
  }
}

const person = new Person("홍길동");
console.log(person.#name); // private를 외부에서 접근하여 에러

------------------------------------------------------------

getter와 setter
- 실제 멤버변수는 private로 선언하고
- get,set키워드를 활용해 getter와 setter를 제공

class Person {
  private _name: string = "";

  get name():string {
    console.log("getter called");
    return this._name;
  }

  set name(newName: string) {
    if(newName.length > 10) {
      throw new Error("최대 길이를 넘었습니다.")
    }
    this._name = name
  }
}

const person = new Person();
person.name = "홍길동"; // setter 호출
console.log(person.name); // getter 호출
person.name = "asdf asdf asdf"; // setter호출 예외 발생

------------------------------------------------------------