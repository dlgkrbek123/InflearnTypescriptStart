------------------------------------------------------------

javascript의 this

- 일반함수의 this는 호출한 주체, 비명시한 경우 전역객체 (동적)
- 화살표함수의 this는 생성된 당시 상위 스코프의 this를 가리킨다. (정적)


function Counter2() {
  this.value = 0;
  
  this.add = function(amount) {
    this.value += amount; // this가 호출한 주체를 가리킨다. 없다면 전역객체
  }
}

function Counter() {
  this.value = 0;
  
  this.add = amount => {
    this.value += amount;
  }
}

------------------------------------------------------------

- Counter, Counter2의 결과가 동일

const counter = new Counter() // 인스턴스 생성
console.log(counter.value) // 0
counter.add(5)
console.log(counter.value) // 5

------------------------------------------------------------

const counter2 = new Counter2();
console.log(counter2.value); // 0
counter2.add(5);
console.log(counter2.value); // 5

const add2 = counter2.add;
add2(5)
console.log(counter2.value) // 1의 경우 10, 2의경우 5

------------------------------------------------------------

this의 타입을 정의
- 첫 인자에 this를 입력시 타입을 정의가능
- 일반적 인자는 이런 경우 두번째 인자부터 시작

function getParams(this: string, index: number): string {
  const params = this.split(',')
  if(index < 0 || params.length <= index) {
    return ''
  }

  return this.split(',')[index]
}

- 위의 함수를 String 클래스에 주입하고 싶으면 interface를 사용해야 함

interface String {
  getParam(this: string, index: number): string;
}

String.prototype.getParam = getParam
console.log("asdf, 1234, ok ".getParam(1))

------------------------------------------------------------

함수 오버로드

function add(x: number, y: number): number;
function add(x: string, y: string): string;

function add(x: number | string, y: number | string) => number | string {
  if(typeof x === 'number' && typoef y === 'number') return x + y;
  else {
    const result = Number(x) + Number(y)
    return result.toString();
  }
}

const v1: number = add(1, 2);

------------------------------------------------------------

named parameters
- 매개변수가 많아질때 유용


function getText({
  name,
  age = 15,
  language,
}: {
  name: string,
  age?: number,
  language?: string
}): string {
  const nameText = name.substr(0, 10);
  const ageText = age >= 35 ? "senior" : "junior";
  return `name: ${nameText}, age: ${ageText}, language: ${languageText}`
} 


- interface를 사용하면 간소화하여 사용가능

interface Param {
  name: string;
  age?: number;
  language?: string;
}

function getText({ name, age = 15, language }: Param):string {}

------------------------------------------------------------